from unittest import TestCase
from SBCrawler.Parser import Parser

class TestParser(TestCase):
    
    def testformat_entries(self):
        expected = [{'number': 1, 'title': 'Porting My JavaScript Game Engine to C for No Reason', 'score': 227, 'comments': 63}, {'number': 2, 'title': 'Enum class improvements for C++17, C++20 and C++23', 'score': 21, 'comments': 3}, {'number': 3, 'title': 'WhenFS: Calender Is Now a File System', 'score': 129, 'comments': 28}, {'number': 4, 'title': 'Using your Kindle as an e-ink monitor', 'score': 85, 'comments': 21}, {'number': 5, 'title': 'Dispatches from the farm upstate', 'score': 28, 'comments': 5}, {'number': 6, 'title': 'Buster: Captcha Solver for Humans', 'score': 35, 'comments': 16}, {'number': 7, 'title': 'Jailbroke my Kindle to use it as an e-ink monitor', 'score': 42, 'comments': 12}, {'number': 8, 'title': 'Evaluating a class of infinite sums in closed form', 'score': 112, 'comments': 25}, {'number': 9, 'title': 'Apprentice, Journeyman, and Master: The Medieval Guild (2018)', 'score': 58, 'comments': 14}, {'number': 10, 'title': 'Open Source Farming Robot', 'score': 600, 'comments': 306}, {'number': 11, 'title': 'Improving _Generic in C2y', 'score': 18, 'comments': 3}, {'number': 12, 'title': 'Praise My GitHub Profile', 'score': 20, 'comments': 12}, {'number': 13, 'title': 'Self-Compressing Neural Networks', 'score': 100, 'comments': 26}, {'number': 14, 'title': 'Belenios: Verifiable online voting system', 'score': 90, 'comments': 125}, {'number': 15, 'title': 'Ken Leishman', 'score': 12, 'comments': '1 comment'}, {'number': 16, 'title': 'A Knownbits Abstract Domain for the Toy Optimizer, Correctly', 'score': 8, 'comments': 'discuss'}, {'number': 17, 'title': 'Tomato nostalgia as I relive my Croatian island childhood', 'score': 67, 'comments': 87}, {'number': 18, 'title': 'Organic maps: Experimental feed based public transport mapping', 'score': 84, 'comments': 12}, {'number': 19, 'title': 'How I Use "AI"', 'score': 191, 'comments': 87}, {'number': 20, 'title': 'Rhombus: Macro-extensible language with conventional syntax built on Racket', 'score': 85, 'comments': 68}, {'number': 21, 'title': 'You can contribute to KDE with non-C++ code', 'score': 79, 'comments': 13}, {'number': 22, 'title': 'USB Sniffer Lite for RP2040', 'score': 103, 'comments': 30}, {'number': 23, 'title': 'Show HN: KittyCal â€“ minimalist PWA calendar app for couples', 'score': 28, 'comments': 10}, {'number': 24, 'title': 'Errors Majorana', 'score': 3, 'comments': 3}, {'number': 25, 'title': 'Written by a 16 year old, a book on how computers work', 'score': 125, 'comments': 46}, {'number': 26, 'title': 'Review of Dark Star: A New History of the Space Shuttle', 'score': 23, 'comments': 14}, {'number': 27, 'title': 'Chinese archaeologists are striking out along the Silk Road', 'score': 38, 'comments': 63}, {'number': 28, 'title': 'Show HN: Candix, a confidential, reverse recruiting platform', 'score': 50, 'comments': 37}, {'number': 29, 'title': 'The Untold Story of How US Spies Sabotaged Soviet Technology', 'score': 134, 'comments': 61}]
        
        obj_parser = Parser()    
        entries = obj_parser.format_entries()
        
        self.assertEqual(expected, entries)